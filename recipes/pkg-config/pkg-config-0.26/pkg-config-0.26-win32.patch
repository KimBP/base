--- pkg.h.orig	2011-04-13 22:16:23 +0400
+++ pkg.h	2012-03-31 06:11:46 +0400
@@ -22,17 +22,6 @@
 
 #include <glib.h>
 
-#ifdef G_OS_WIN32
-/* No hardcoded paths in the binary, thanks */
-/* It's OK to leak this */
-#undef PKG_CONFIG_PC_PATH
-#define PKG_CONFIG_PC_PATH \
-  g_strconcat (g_win32_get_package_installation_subdirectory (NULL, NULL, "lib/pkgconfig"), \
-	       ";", \
-	       g_win32_get_package_installation_subdirectory (NULL, NULL, "share/pkgconfig"), \
-	       NULL)
-#endif
-
 typedef enum
 {
   LESS_THAN,
@@ -142,6 +131,10 @@
 extern int dont_define_prefix;
 /* The name of the variable that acts as prefix, unless it is "prefix" */
 extern char *prefix_variable;
+/* Path to pkg-config installation directory, it is used instead of
+ * PKG_CONFIG_PC_PATH for finding /lib/pkgconfig and /share/pkgconfig
+ */
+extern char *pkg_config_pc_path;
 
 /* If TRUE, output flags in MSVC syntax. */
 extern int msvc_syntax;
--- main.c.orig	2011-05-15 13:06:06 +0400
+++ main.c	2012-03-31 06:39:45 +0400
@@ -40,6 +40,9 @@
 static int want_verbose_errors = 0;
 static int want_stdout_errors = 0;
 char *pcsysrootdir = NULL;
+#ifdef G_OS_WIN32
+char *pkg_config_pc_path = NULL;
+#endif
 
 void
 debug_spew (const char *format, ...)
@@ -293,6 +296,30 @@
       debug_spew ("PKG_CONFIG_DEBUG_SPEW variable enabling debug spew\n");
     }
 
+#ifdef G_OS_WIN32
+    pkg_config_pc_path = g_win32_get_package_installation_directory_of_module (NULL);
+    if (pkg_config_pc_path == NULL)
+      {
+        /* This variable is used later to add pc_path to the virtual pkg-config
+         * package. Can't proceed without it. This only happens when
+         * GetModuleFilename() fails; if it does - that failure should be
+         * investigated and fixed.
+         */
+         verbose_error ("Failed to get pkg_config_pc_path\n");
+         exit (1);
+      }
+    else
+      {
+        char *lpath, *shpath;
+        lpath = g_build_filename (pkg_config_pc_path, "lib", "pkgconfig", NULL);
+        shpath = g_build_filename (pkg_config_pc_path, "share", "pkgconfig", NULL);
+        free (pkg_config_pc_path);
+        pkg_config_pc_path = g_strconcat (lpath, G_SEARCHPATH_SEPARATOR_S, shpath, NULL);
+        free (lpath);
+        free (shpath);
+      }
+#endif
+
   search_path = getenv ("PKG_CONFIG_PATH");
   if (search_path) 
     {
@@ -304,7 +331,11 @@
     }
   else
     {
+#ifdef G_OS_WIN32
+      add_search_dirs(pkg_config_pc_path, G_SEARCHPATH_SEPARATOR_S);
+#else
       add_search_dirs(PKG_CONFIG_PC_PATH, G_SEARCHPATH_SEPARATOR_S);
+#endif
     }
 
   pcsysrootdir = getenv ("PKG_CONFIG_SYSROOT_DIR");
--- pkg.c.orig	2011-05-15 16:04:08 +0400
+++ pkg.c	2012-03-31 06:12:08 +0400
@@ -240,7 +240,11 @@
 
   if (pkg->vars == NULL)
     pkg->vars = g_hash_table_new (g_str_hash, g_str_equal);
+#ifdef G_OS_WIN32
+  g_hash_table_insert (pkg->vars, "pc_path", pkg_config_pc_path);
+#else
   g_hash_table_insert (pkg->vars, "pc_path", PKG_CONFIG_PC_PATH);
+#endif
 
   debug_spew ("Adding virtual 'pkg-config' package to list of known packages\n");
   g_hash_table_insert (packages, pkg->key, pkg);

